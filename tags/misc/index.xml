<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>misc on CyberTaskForce Zero</title>
    <link>/tags/misc/</link>
    <description>Recent content in misc on CyberTaskForce Zero</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2021-2024 CyberTaskForce Zero</copyright>
    <lastBuildDate>Sun, 09 Oct 2022 00:20:13 +0100</lastBuildDate><atom:link href="/tags/misc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cyber Security Rumble 2022 - Scramble</title>
      <link>/posts/csr22-scramble/</link>
      <pubDate>Sun, 09 Oct 2022 00:20:13 +0100</pubDate>
      
      <guid>/posts/csr22-scramble/</guid>
      <description>Description: Show me your wordle skills!
Task author: rixxc|RedRocket
nc scamble.rumble.host 2568 The service running looks like this:
#!/usr/bin/env python3 import random import string from secret import FLAG NUMBER_OF_GAMES = 100 THRESHOLD = 5 SIZE_OF_WORDLIST = 12000 rng = random.SystemRandom() def game(secret_word, wordlist): print(&amp;#34;[start game]&amp;#34;) chars = set(secret_word) for guess_count in range(1, 7): guess = input(&amp;#34;&amp;gt; &amp;#34;)[:5] assert(len(guess) == 5) assert(guess in wordlist) if guess == secret_word: print(&amp;#34;[guess correct]&amp;gt; &amp;#34;) break result = &amp;#34;&amp;#34; for i in range(5): if guess[i] == secret_word[i]: result += &amp;#34;+&amp;#34; elif guess[i] in chars: result += &amp;#34;*&amp;#34; else: result += &amp;#34;-&amp;#34; print(result) else: print(&amp;#34;[number of guesses exceeded]&amp;gt; &amp;#34;) return guess_count def main(): wordlist = set() while len(wordlist) &amp;lt; SIZE_OF_WORDLIST: word = &amp;#39;&amp;#39;.</description>
      <content>&lt;h4 id=&#34;description&#34;&gt;Description:&lt;/h4&gt;
&lt;p&gt;Show me your wordle skills!&lt;/p&gt;
&lt;p&gt;Task author: rixxc|RedRocket&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;nc scamble.rumble.host 2568
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The service running looks like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-python=&#34; data-lang=&#34;python=&#34;&gt;#!/usr/bin/env python3

import random
import string
from secret import FLAG

NUMBER_OF_GAMES = 100
THRESHOLD = 5
SIZE_OF_WORDLIST = 12000

rng = random.SystemRandom()


def game(secret_word, wordlist):
    print(&amp;#34;[start game]&amp;#34;)
    chars = set(secret_word)

    for guess_count in range(1, 7):
        guess = input(&amp;#34;&amp;gt; &amp;#34;)[:5]
        assert(len(guess) == 5)
        assert(guess in wordlist)

        if guess == secret_word:
            print(&amp;#34;[guess correct]&amp;gt; &amp;#34;)
            break

        result = &amp;#34;&amp;#34;
        for i in range(5):
            if guess[i] == secret_word[i]:
                result += &amp;#34;+&amp;#34;
            elif guess[i] in chars:
                result += &amp;#34;*&amp;#34;
            else:
                result += &amp;#34;-&amp;#34;

        print(result)
    else:
        print(&amp;#34;[number of guesses exceeded]&amp;gt; &amp;#34;)

    return guess_count


def main():
    wordlist = set()
    while len(wordlist) &amp;lt; SIZE_OF_WORDLIST:
        word = &amp;#39;&amp;#39;.join(rng.choices(string.ascii_uppercase, weights=[7.58, 1.96, 3.16, 4.98, 18.93, 1.49, 3.02, 4.98, 8.02, 0.24, 1.32, 3.60, 2.55, 12.53, 2.24, 0.67, 0.02, 6.89, 8.42, 7.79, 3.83, 0.84, 1.78, 0.05, 0.05, 1.21], k=5))
        wordlist.add(word)

    print(&amp;#34;Here is your personal wordlist:&amp;#34;)
    print(&amp;#34;[begin of wordlist]&amp;#34;)
    for word in wordlist:
        print(word)
    print(&amp;#34;[end of wordlist]&amp;#34;)

    guesses = []
    for _ in range(NUMBER_OF_GAMES):
        secret_word = rng.choice(list(wordlist))
        guesses.append(game(secret_word, wordlist))

    average_guesses = sum(guesses) / NUMBER_OF_GAMES
    print(f&amp;#39;avg.: {average_guesses}&amp;#39;)
    if average_guesses &amp;lt; THRESHOLD:
        print(FLAG)


if __name__ == &amp;#39;__main__&amp;#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Summarized we need to solve a game of wordle 100 times with an average guess num of less than 5.
This is humanely possible, but not in the given timeframe, therefore we need to automize it.&lt;/p&gt;
&lt;p&gt;We found an article about &lt;a href=&#34;https://aditya-sengupta.github.io/coding/2022/01/13/wordle.html&#34;&gt;entropy-based wordle solving&lt;/a&gt; from Aditya Sengupta and an implementation in the Julia programming language.&lt;/p&gt;
&lt;p&gt;Then we rewrote his &lt;a href=&#34;https://github.com/aditya-sengupta/wordle-solver/blob/main/src/WordleSolver.jl&#34;&gt;wordle-solver&lt;/a&gt; in python:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;// wordle_doer.py&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-python=&#34; data-lang=&#34;python=&#34;&gt;from collections import Counter
from scipy.stats import entropy
import string

class WordleDoer:
    def __init__(self, wordlist, wordlength) -&amp;gt; None:
        self.wordlist = wordlist
        self.wordlength = wordlength
        self.corpus = []
        self.first_guess = None

    def reset(self):
        self.corpus = self.wordlist

    def guessToList(self, guess):
        result = [None] * self.wordlength
        conversionMap = {
            &amp;#39;+&amp;#39;: 2,
            &amp;#39;*&amp;#39;: 1,
            &amp;#39;-&amp;#39;: 0
        }
        for i in range(0, 5):
            result[i] = conversionMap[guess[i]]

        return result


    def listToGuess(self, list: list):
        guess = [&amp;#39;-&amp;#39;] * 5
        conversionMap = {
            2: &amp;#39;+&amp;#39;,
            1: &amp;#39;*&amp;#39;,
            0: &amp;#39;-&amp;#39;
        }
        for i in range(0, 5):
            guess[i] = conversionMap[list[i]]

        return &amp;#39;&amp;#39;.join(guess)


    def constrain(self, query, result):
        self.corpus = [word for word in self.corpus if self.guess(query, word) == result]


    def guess(self, query, word):
        result = [0] * self.wordlength

        for i in range(0, self.wordlength):
            if word[i] == query[i]:
                result[i] = 2

        for i in range(0, self.wordlength):
            if query[i] in word and result[i] != 2:
                result[i] = 1

        return self.listToGuess(result)

    def choose(self):
        print(len(self.corpus))
        if len(self.corpus) == 0:
            return None
        if len(self.corpus) == 1:
            return self.corpus[0]
        if self.first_guess is not None and len(self.corpus) == len(self.wordlist):
            return self.first_guess

        is_known = [all(x[i] == self.corpus[0][i] for x in self.corpus) for i in range(0, self.wordlength)]
        word_so_far = &amp;#34;&amp;#34;.join([self.corpus[0][j] if is_known[j] else &amp;#39;0&amp;#39; for j in range(0, self.wordlength)])
        char_occurences = {}
        for char in string.ascii_uppercase:
            char_occurences[char] = [sum([word[j].count(char) for word in self.corpus]) for j in range(0, self.wordlength)]
        best_word = self.corpus[0]
        best_diff_entropy = 0
        for word in self.corpus:
            diff_entropy = 0
            seen_chars = set()
            for (i, char) in enumerate(word):
                greens = char_occurences[char][i]
                if not (char in seen_chars):
                    mask = [ch != char for ch in word_so_far]
                    yellows = sum([char_occurences[char][i] for i in range(0, self.wordlength) if mask[i]]) - greens
                    seen_chars.add(char)
                else:
                    yellows = 0
                greys = len(self.corpus) - yellows - greens
                dist = [greens, yellows, greys]
                sumdist = sum(dist)
                dist = [entry / sumdist for entry in dist]
                diff_entropy = diff_entropy + entropy(dist)
            if diff_entropy &amp;gt;= best_diff_entropy:
                best_diff_entropy = diff_entropy
                best_word = word

        if self.first_guess is None:
            self.first_guess = best_word

        return best_word
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Our implementation has the following changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We are caching the first guess, because
&lt;ul&gt;
&lt;li&gt;the wordlist doesn&amp;rsquo;t change between games&lt;/li&gt;
&lt;li&gt;the first guess takes up the most time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We dumbed down the &lt;code&gt;guess&lt;/code&gt; method to match the given game
&lt;ul&gt;
&lt;li&gt;The game implementation does not Count occurences&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because we need to win 100 games with high reliability, we needed to automize it:
&lt;code&gt;doit.py&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-python=&#34; data-lang=&#34;python=&#34;&gt;#!/usr/bin/python

from pwn import *
from wordle_doer import WordleDoer
import re

r = remote(&amp;#34;scamble.rumble.host&amp;#34;, 2568)
#r = remote(&amp;#34;localhost&amp;#34;, 2568)

rateMatcher = re.compile(&amp;#34;\s?[\*+-]{5}\s?&amp;#34;)

r.recvuntil(b&amp;#34;[begin of wordlist]\n&amp;#34;)
wordlist = [word.decode() for word in r.recvuntil(b&amp;#34;[end of wordlist]\n&amp;#34;, True).splitlines(False)]

solver = WordleDoer(wordlist, 5)

while True:
    start = r.recvuntil([b&amp;#34;avg.:&amp;#34;, b&amp;#34;[start game]&amp;#34;])
    if start.startswith(b&amp;#34;avg.:&amp;#34;):
        print(start)
        print(r.recvline())
        break
    print(&amp;#34;Game started&amp;#34;)
    solver.reset()
    while True:
        guess = solver.choose()
        if len(guess) != 5:
            print(solver.corpus)
        print(&amp;#34;My guess: &amp;#39;&amp;#34; + guess + &amp;#39;&amp;#34;&amp;#39;)
        command = r.recvuntil(b&amp;#34;&amp;gt; &amp;#34;, True)
        print(b&amp;#34;command: &amp;#34; + command)
        if b&amp;#34;[guess correct]&amp;#34; in command or b&amp;#34;[number of guesses exceeded]&amp;#34; in command:
            break
        r.sendline(guess.encode())
        response = r.recvline().decode().replace(&amp;#34;\n&amp;#34;, &amp;#34;&amp;#34;)
        if not rateMatcher.match(response):
            print(&amp;#34;Start anew: &amp;#34; + response)
            break
        print(&amp;#34;Response: &amp;#39;&amp;#34; + response + &amp;#34;&amp;#39;&amp;#34;)
        solver.constrain(guess, response)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That&amp;rsquo;s it!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Cyber Security Rumble 2022 - Misc Me Plx</title>
      <link>/posts/csr22-misc-me-plx/</link>
      <pubDate>Sat, 08 Oct 2022 23:59:13 +0100</pubDate>
      
      <guid>/posts/csr22-misc-me-plx/</guid>
      <description>Description: I like to sniff buses.
Challenge author: Skipper|RedRocket
We get:
90K recording.sr one unzip later
10M logic-1-1 10M logic-1-2 10M logic-1-3 10M logic-1-4 10M logic-1-5 10M logic-1-6 10M logic-1-7 10M logic-1-8 7,5M logic-1-9 201 metadata 90K recording.sr 1 version # cat metadata [global] sigrok version=0.5.2 [device 1] capturefile=logic-1 total probes=8 samplerate=24 MHz total analog=0 probe1=D0 probe2=D1 probe3=D2 probe4=D3 probe5=D4 probe6=D5 probe7=D6 probe8=D7 unitsize=1 View it in PulseView (GUI of sigrok)</description>
      <content>&lt;h4 id=&#34;description&#34;&gt;Description:&lt;/h4&gt;
&lt;p&gt;I like to sniff buses.&lt;/p&gt;
&lt;p&gt;Challenge author: Skipper|RedRocket&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/csr22_bus_sniffer.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;We get:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;90K recording.sr
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;one &lt;code&gt;unzip&lt;/code&gt; later&lt;/em&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; 10M logic-1-1
 10M logic-1-2
 10M logic-1-3
 10M logic-1-4
 10M logic-1-5
 10M logic-1-6
 10M logic-1-7
 10M logic-1-8
7,5M logic-1-9
 201 metadata
 90K recording.sr
   1 version
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# cat metadata

[global]
sigrok version=0.5.2

[device 1]
capturefile=logic-1
total probes=8
samplerate=24 MHz
total analog=0
probe1=D0
probe2=D1
probe3=D2
probe4=D3
probe5=D4
probe6=D5
probe7=D6
probe8=D7
unitsize=1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;View it in PulseView (GUI of sigrok)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/csr22_pulse.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;D7 looks like a clock pulse.
When googling &amp;ldquo;clock bus protocol&amp;rdquo; &lt;strong&gt;IÂ²C&lt;/strong&gt; seems to pop up quite often.
I try adding a decoder using the sigrok-cli:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# sigrok -i ~/ctf/csr22/miscmeplx/recording.sr -P i2c:scl=D7:sda=D6 | grep &amp;#34;Data write&amp;#34;
i2c-1: Data write: 69
i2c-1: Data write: 6E
i2c-1: Data write: 69
i2c-1: Data write: 74
i2c-1: Data write: 5F
i2c-1: Data write: 70
i2c-1: Data write: 72
i2c-1: Data write: 6F
i2c-1: Data write: 67
i2c-1: Data write: 5F
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After converting the bytes to ascii we see:
&lt;code&gt;init_prog_addr__77_1_2_01ÈCSR{i2c_d0_b3_v3ry_31337}_|&amp;gt;|&amp;gt;|&amp;gt;ò&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Yeah!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/csr22_doggo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
